#  /Mountain Pass Application/main/views.py

# from main.models import PerevalGpsTracks, PerevalAdded
# from main.services.google_maps import get_google_map_link
# from django.shortcuts import get_object_or_404  # –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ 404
# from rest_framework.response import Response  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç Response
# from django.contrib.auth.decorators import login_required  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# from rest_framework.permissions import IsAuthenticated
import traceback
import os
import logging
from main.db_service import DatabaseService
from main.models import PerevalImages, PerevalStatus, PerevalUser, EmailConfirmationToken, PerevalAdded, ApiSettings, \
    ModeratorGroup, User, Season, DifficultyLevel
from main.permissions import IsSuperAdmin, IsModerator
from main.utils import send_confirmation_email
from main.serializers import SubmitDataSerializer, PerevalUserCheckSerializer, \
    PerevalUserUpdateSerializer, PerevalAddedSerializer, SeasonSerializer, DifficultyLevelSerializer, \
    ApiSettingsSerializer, PerevalUserSerializer # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
from django.conf import settings
from rest_framework.views import APIView
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from rest_framework import status  # –î–ª—è —É–∫–∞–∑–∞–Ω–∏—è HTTP-—Å—Ç–∞—Ç—É—Å–æ–≤
from drf_yasg.utils import swagger_auto_schema  # üìå –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Swagger-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä Swagger-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
from drf_yasg import openapi  # üìå –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
from rest_framework.parsers import MultiPartParser, FormParser  # üìå –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
from rest_framework import generics
from rest_framework.generics import UpdateAPIView, ListCreateAPIView, DestroyAPIView, RetrieveUpdateAPIView, ListAPIView
from rest_framework.permissions import AllowAny, IsAdminUser
from rest_framework.response import Response



# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class SeasonListView(generics.ListAPIView):
    queryset = Season.objects.all()
    serializer_class = SeasonSerializer

class DifficultyLevelListView(generics.ListAPIView):
    queryset = DifficultyLevel.objects.all()
    serializer_class = DifficultyLevelSerializer


class SubmitDataView(APIView):
    """API –¥–ª—è –ø—Ä–∏—ë–º–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–≤–∞–ª–µ"""

    @swagger_auto_schema(
        request_body=SubmitDataSerializer,  # üìå –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–æ–¥–∏—Ç—å JSON –≤ Swagger
        manual_parameters=[],  # üìå –£–±–∏—Ä–∞–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ UI
        responses={201: openapi.Response("Created", SubmitDataSerializer)},  # üìå –û–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    )
    def post(self, request):
        """üìå POST: –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–∞–ª"""
        logger.info("üöÄ –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /submitData/")
        print("üì• –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", request.data)

        try:
            serializer = SubmitDataSerializer(data=request.data)

            if serializer.is_valid():
                data = serializer.validated_data
                logger.info("‚úÖ –®–ê–ì 2: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã")
                print("‚úÖ –®–ê–ì 2: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)

                # üîπ –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info("üîç –®–ê–ì 3: –í—ã–∑–æ–≤ `add_user()` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                user = DatabaseService.add_user(data["user"])

                logger.info(f"üë§ –®–ê–ì 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω/—Å–æ–∑–¥–∞–Ω: {user}")
                print(f"üë§ –®–ê–ì 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω/—Å–æ–∑–¥–∞–Ω: {user}")

                # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è `connect`
                if not data.get("connect", False):
                    logger.warning("‚ùå –®–ê–ì 5: –ù–µ—Ç —Å–≤—è–∑–∏, –ø–µ—Ä–µ–≤–∞–ª –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    return Response(
                        {"status": 400, "message": "–ù–µ—Ç —Å–≤—è–∑–∏. –ü–µ—Ä–µ–≤–∞–ª –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."},
                        status=status.HTTP_400_BAD_REQUEST
                    )

                # üîπ –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–≤–∞–ª
                logger.info(f"üèîÔ∏è –®–ê–ì 6: –í—ã–∑–æ–≤ `add_pereval()` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–∞–ª–∞ (user_id={user.id})")
                pereval = DatabaseService.add_pereval(user_email=user.email, data=data)

                logger.info(f"‚úÖ –®–ê–ì 7: –ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, ID: {pereval.id}")
                print(f"‚úÖ –®–ê–ì 7: –ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, ID: {pereval.id}")

                return Response({"status": 200, "message": None, "id": pereval.id}, status=status.HTTP_201_CREATED)

            logger.warning(f"‚ùå –®–ê–ì 8: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {serializer.errors}")
            return Response({"status": 400, "message": serializer.errors}, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"‚ö† –®–ê–ì 9: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
            traceback.print_exc()
            return Response({"status": 500, "message": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UploadImageView(APIView):
    """üìå API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä–µ–≤–∞–ª–æ–≤"""
    parser_classes = (MultiPartParser, FormParser)

    @swagger_auto_schema(
        operation_description="üìå –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–∞–ª–∞",
        manual_parameters=[
            openapi.Parameter(
                'pereval_id',
                openapi.IN_FORM,
                description="üìå ID –ø–µ—Ä–µ–≤–∞–ª–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                type=openapi.TYPE_INTEGER,
                required=True
            ),
            openapi.Parameter(
                'image',
                openapi.IN_FORM,
                description="üìå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                type=openapi.TYPE_FILE,
                required=True
            ),
            openapi.Parameter(
                'title',
                openapi.IN_FORM,
                description="üìå –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                type=openapi.TYPE_STRING,
                required=True
            ),
            openapi.Parameter(
                'file_name',
                openapi.IN_FORM,
                description="üìå –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                type=openapi.TYPE_STRING,
                required=True
            )
        ],
        responses={201: openapi.Response("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")}
    )
    def post(self, request):
        """üìå –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î"""
        logger.info("[UploadImageView][post] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        logger.info(f"[UploadImageView][post] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {request.data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω—ã –ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'image' not in request.FILES:
            logger.error("[UploadImageView][post] –û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω.")
            return Response(
                {"status": 400, "message": "–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"},
                status=status.HTTP_400_BAD_REQUEST
            )

        image = request.FILES['image']
        pereval_id = request.data.get('pereval_id')
        title = request.data.get('title')
        file_name = request.data.get('file_name')

        if not title or not file_name:
            logger.error("[UploadImageView][post] –û—à–∏–±–∫–∞: –ü–æ–ª—è title –∏ file_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
            return Response(
                {"status": 400, "message": "–ü–æ–ª—è title –∏ file_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–µ–≤–∞–ª
        try:
            pereval = PerevalAdded.objects.get(id=pereval_id)
            logger.info(f"[UploadImageView][post] –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–∞–ª ID: {pereval_id}")
        except PerevalAdded.DoesNotExist:
            logger.error(f"[UploadImageView][post] –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–≤–∞–ª ID {pereval_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return Response(
                {"status": 400, "message": "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        existing_images_count = PerevalImages.objects.filter(pereval=pereval).count()
        if existing_images_count >= 3:
            logger.error(f"[UploadImageView][post] –û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–∞–ª–∞ ID {pereval_id}.")
            return Response(
                {"status": 400, "message": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–≤–∞–ª"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É pereval_images, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        upload_dir = os.path.join(settings.MEDIA_ROOT, "pereval_images")
        if not os.path.exists(upload_dir):
            os.makedirs(upload_dir)
            logger.info(f"[UploadImageView][post] –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {upload_dir}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        relative_path = os.path.join("pereval_images", file_name)
        full_path = os.path.join(settings.MEDIA_ROOT, relative_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try:
            default_storage.save(relative_path, ContentFile(image.read()))
            logger.info(f"[UploadImageView][post] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {relative_path}")
        except Exception as e:
            logger.error(f"[UploadImageView][post] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return Response(
                {"status": 500, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        try:
            image_record = PerevalImages.objects.create(
                pereval=pereval,
                data=relative_path,
                title=title
            )
            logger.info(f"[UploadImageView][post] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î —Å ID: {image_record.id}")
        except Exception as e:
            logger.error(f"[UploadImageView][post] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {str(e)}")
            return Response(
                {"status": 500, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

        return Response(
            {"status": 201, "message": "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", "image_id": image_record.id, "data": relative_path},
            status=status.HTTP_201_CREATED
        )


class SubmitDataUpdateView(APIView):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–≤–∞–ª–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å new –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º"""

    http_method_names = ['patch']

    def patch(self, request, pk, *args, **kwargs):
        try:
            pereval = PerevalAdded.objects.get(pk=pk)
        except PerevalAdded.DoesNotExist:
            return Response(
                {"state": 0, "message": "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"},
                status=status.HTTP_404_NOT_FOUND
            )

        email = request.data.get("email")
        if not email:
            return Response(
                {"state": 0, "message": "–ü–æ–ª–µ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"},
                status=status.HTTP_400_BAD_REQUEST
            )

        if pereval.user.email != email:
            return Response(
                {"state": 0, "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞"},
                status=status.HTTP_403_FORBIDDEN
            )

        if pereval.status.id != 1:
            return Response(
                {"state": 0, "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –Ω–µ new"},
                status=status.HTTP_400_BAD_REQUEST
            )

        mutable_data = request.data.copy()
        # –î–æ–±–∞–≤–ª—è–µ–º route_description –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—è
        allowed_fields = ["beautyTitle", "title", "other_titles", "coord", "difficulties", "route_description", "images"]
        filtered_data = {key: mutable_data[key] for key in allowed_fields if key in mutable_data}

        if "coord" in filtered_data:
            coord_fields = ["latitude", "longitude", "height"]
            filtered_data["coord"] = {k: v for k, v in filtered_data["coord"].items() if k in coord_fields}

        if "difficulties" in filtered_data and isinstance(filtered_data["difficulties"], list):
            for diff in filtered_data["difficulties"]:
                diff_keys = ["season", "difficulty"]
                for key in list(diff.keys()):
                    if key not in diff_keys:
                        del diff[key]

        serializer = SubmitDataSerializer(pereval, data=filtered_data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(
                {"state": 1, "message": "–ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"},
                status=status.HTTP_200_OK
            )

        return Response(
            {"state": 0, "message": serializer.errors},
            status=status.HTTP_400_BAD_REQUEST
        )


class SubmitDataListView(ListAPIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤."""

    serializer_class = SubmitDataSerializer

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–∞–ª—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
        return PerevalAdded.objects.all()  # üî• –¢–µ–ø–µ—Ä—å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ email


class SubmitDataDetailView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–µ—Ä–µ–≤–∞–ª–µ"""

    def get(self, request, pk, *args, **kwargs):
        """
        ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–µ—Ä–µ–≤–∞–ª–µ –ø–æ ID.
        ‚úÖ –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        try:
            pereval = PerevalAdded.objects.get(pk=pk)
            serializer = SubmitDataSerializer(pereval)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except PerevalAdded.DoesNotExist:
            return Response(
                {"state": 0, "message": f"–ü–µ—Ä–µ–≤–∞–ª —Å ID {pk} –Ω–µ –Ω–∞–π–¥–µ–Ω"},
                status=status.HTTP_404_NOT_FOUND
            )


class RegisterView(APIView):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    @swagger_auto_schema(
        request_body=PerevalUserSerializer,  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # responses={201: openapi.Response("–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", PerevalUserSerializer)},
    )
    def post(self, request):
        """POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        serializer = PerevalUserSerializer(data=request.data)
        if serializer.is_valid():
            user_data = {
                "email": serializer.validated_data["email"],
                "family_name": serializer.validated_data["family_name"],
                "first_name": serializer.validated_data["first_name"],
                "father_name": serializer.validated_data.get("father_name", ""),
                "phone": serializer.validated_data["phone"]
            }

            user = DatabaseService.add_user(user_data)
            return Response({"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "user_id": user.id},
                            status=status.HTTP_201_CREATED)

        return Response({"message": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", "errors": serializer.errors},
                        status=status.HTTP_400_BAD_REQUEST)


class SubmitDataReplaceView(UpdateAPIView):
    """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞ (PUT)"""

    queryset = PerevalAdded.objects.all()
    serializer_class = SubmitDataSerializer
    permission_classes = [AllowAny]

    @swagger_auto_schema(
        request_body=SubmitDataSerializer,  # –ó–∞–ø—Ä–æ—Å —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        responses={
            200: openapi.Response("–ü–µ—Ä–µ–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω", SubmitDataSerializer),
            400: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –Ω–µ `new`",
            404: "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        },
    )
    def put(self, request, pk, *args, **kwargs):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞"""
        user_email = request.user.email  # –ë–µ—Ä—ë–º email –∏–∑ JWT-—Ç–æ–∫–µ–Ω–∞

        try:
            pereval = PerevalAdded.objects.get(pk=pk)
        except PerevalAdded.DoesNotExist:
            return Response({"state": 0, "message": "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)

        # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–≤–∞–ª–∞
        if pereval.user.email != user_email:
            return Response({"state": 0, "message": "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞"},
                            status=status.HTTP_403_FORBIDDEN)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ `new`)
        if pereval.status != "new":
            return Response(
                {"state": 0, "message": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞ –Ω–µ `new`"},
                status=status.HTTP_400_BAD_REQUEST
            )

        serializer = SubmitDataSerializer(pereval, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"state": 1, "message": "–ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"}, status=status.HTTP_200_OK)

        return Response({"state": 0, "message": serializer.errors}, status=status.HTTP_400_BAD_REQUEST)


class SubmitDataDeleteView(APIView):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞ (DELETE)"""

    @swagger_auto_schema(
        operation_description="–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–µ–≤–∞–ª, –µ—Å–ª–∏ email —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å new",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['email'],
            properties={
                'email': openapi.Schema(type=openapi.TYPE_STRING, description='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            }
        ),
        responses={
            200: openapi.Response('–ü–µ—Ä–µ–≤–∞–ª —É–¥–∞–ª—ë–Ω', openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    'state': openapi.Schema(type=openapi.TYPE_INTEGER, example=1),
                    'message': openapi.Schema(type=openapi.TYPE_STRING, example='–ü–µ—Ä–µ–≤–∞–ª —É–¥–∞–ª—ë–Ω')
                }
            )),
            400: '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –Ω–µ new',
            403: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ',
            404: '–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
    )
    def delete(self, request, pk, *args, **kwargs):
        """–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–µ–≤–∞–ª, –µ—Å–ª–∏ email —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å new"""
        logger.info(f"üöÄ DELETE /submitData/{pk}/ –≤—ã–∑–≤–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–∞–ª –ø–æ ID
        try:
            pereval = PerevalAdded.objects.get(pk=pk)
        except PerevalAdded.DoesNotExist:
            logger.warning(f"‚ùå –ü–µ—Ä–µ–≤–∞–ª {pk} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return Response(
                {"state": 0, "message": "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"},
                status=status.HTTP_404_NOT_FOUND
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        email = request.data.get("email")
        if not email:
            logger.warning("‚ùå –ü–æ–ª–µ email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return Response(
                {"state": 0, "message": "–ü–æ–ª–µ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–≤–∞–ª–∞
        if pereval.user.email != email:
            logger.warning(f"‚õî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞ {pk}")
            return Response(
                {"state": 0, "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞"},
                status=status.HTTP_403_FORBIDDEN
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å new (id = 1)
        if pereval.status.id != 1:
            logger.warning(f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞ {pk} –Ω–µ new")
            return Response(
                {"state": 0, "message": "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –Ω–µ new"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–∞–ª
        pereval.delete()
        logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–∞–ª {pk} —É–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {email}")
        return Response(
            {"state": 1, "message": "–ü–µ—Ä–µ–≤–∞–ª —É–¥–∞–ª—ë–Ω"},
            status=status.HTTP_200_OK
        )


class PerevalPhotosListView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–µ—Ä–µ–≤–∞–ª–∞"""

    def get(self, request, pk, *args, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–∞–ª–∞"""
        logger.info(f"üöÄ GET /uploadImage/photos/{pk}/ –≤—ã–∑–≤–∞–Ω")

        try:
            photos = PerevalImages.objects.filter(pereval_id=pk)
            if not photos.exists():
                logger.warning(f"‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–∞–ª–∞ {pk} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return Response({"state": 0, "message": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}, status=status.HTTP_404_NOT_FOUND)

            photos_data = [{"id": photo.id, "file_name": photo.data, "title": photo.title} for photo in photos]

            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(photos_data)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–∞–ª–∞ {pk}")
            return Response({"state": 1, "photos": photos_data}, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–µ—Ä–µ–≤–∞–ª–∞ {pk}: {str(e)}")
            return Response({"state": 0, "message": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class DeletePerevalPhotoView(APIView):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–≤–∞–ª–∞"""

    @swagger_auto_schema(
        operation_description="üìå –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–≤–∞–ª–∞, –µ—Å–ª–∏ email —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å new",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['email'],
            properties={
                'email': openapi.Schema(type=openapi.TYPE_STRING, description='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            }
        ),
        responses={
            200: openapi.Response('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞', openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    'state': openapi.Schema(type=openapi.TYPE_INTEGER, example=1),
                    'message': openapi.Schema(type=openapi.TYPE_STRING, example='–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞')
                }
            )),
            400: '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –Ω–µ new',
            403: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ',
            404: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }
    )
    def delete(self, request, photo_id, *args, **kwargs):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ email —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å new"""
        logger.info(f"üöÄ DELETE /uploadImage/{photo_id}/ –≤—ã–∑–≤–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ ID
        try:
            photo = PerevalImages.objects.get(pk=photo_id)
        except PerevalImages.DoesNotExist:
            logger.warning(f"‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return Response(
                {"state": 0, "message": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"},
                status=status.HTTP_404_NOT_FOUND
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        email = request.data.get("email")
        if not email:
            logger.warning("‚ùå –ü–æ–ª–µ email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return Response(
                {"state": 0, "message": "–ü–æ–ª–µ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–≤–∞–ª–∞
        if photo.pereval.user.email != email:
            logger.warning(f"‚õî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ {photo_id}")
            return Response(
                {"state": 0, "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"},
                status=status.HTTP_403_FORBIDDEN
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞ new (id = 1)
        if photo.pereval.status.id != 1:
            logger.warning(f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞ –Ω–µ new –¥–ª—è —Ñ–æ—Ç–æ {photo_id}")
            return Response(
                {"state": 0, "message": "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞ –Ω–µ new"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        photo.delete()
        logger.info(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {email}")
        return Response(
            {"state": 1, "message": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞"},
            status=status.HTTP_200_OK
        )


class ModerationListView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–≤–∞–ª–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (GET /api/moderation/)"""

    @swagger_auto_schema(
        responses={200: SubmitDataSerializer(many=True)}
    )
    def get(self, request, *args, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–∞–ª–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º `pending`"""
        PENDING_STATUS_ID = 2  # ‚úÖ ID —Å—Ç–∞—Ç—É—Å–∞ "pending" –≤ –ë–î
        perevals = PerevalAdded.objects.filter(status=PENDING_STATUS_ID)

        serializer = SubmitDataSerializer(perevals, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)


class DecisionPerevalView(APIView):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –ø–µ—Ä–µ–≤–∞–ª–∞–º."""
    permission_classes = [IsModerator]

    @swagger_auto_schema(
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['status_id'],
            properties={
                'status_id': openapi.Schema(type=openapi.TYPE_INTEGER, enum=[3, 4])
            },
        ),
        responses={
            200: "–ü–µ—Ä–µ–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω",
            400: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –ø–µ—Ä–µ–≤–∞–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
            404: "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    )
    def put(self, request, pk, *args, **kwargs):
        try:
            pereval = PerevalAdded.objects.get(pk=pk)
        except PerevalAdded.DoesNotExist:
            return Response({"state": 0, "message": "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)

        status_id = request.data.get("status_id")
        if status_id not in [3, 4]:
            return Response({"state": 0, "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ç–∞—Ç—É—Å–∞"}, status=status.HTTP_400_BAD_REQUEST)

        if pereval.status.id in [3, 4]:
            return Response({"state": 0, "message": "–ü–µ—Ä–µ–≤–∞–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"}, status=status.HTTP_400_BAD_REQUEST)

        pereval.status = PerevalStatus.objects.get(id=status_id)
        pereval.save()
        return Response({"state": 1, "message": f"–ü–µ—Ä–µ–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ —Å—Ç–∞—Ç—É—Å–∞ ID {status_id}"},
                        status=status.HTTP_200_OK)


class SubmitPerevalForModerationView(APIView):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–∞–ª–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (PUT /api/passes/{id}/submit/)"""

    @swagger_auto_schema(
        responses={
            200: "–ü–µ—Ä–µ–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
            400: "–ü–µ—Ä–µ–≤–∞–ª —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –ø—Ä–∏–Ω—è—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω",
            404: "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    )
    def put(self, request, pk, *args, **kwargs):
        """
        –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞ —Å `new` (ID=1) –Ω–∞ `pending` (ID=2).
        –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–∞–ª —É–∂–µ `pending` (ID=2) ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
        –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–∞–ª `accepted` (ID=3) –∏–ª–∏ `rejected` (ID=4) ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
        """
        try:
            # üîç –ò—â–µ–º –ø–µ—Ä–µ–≤–∞–ª –ø–æ ID
            pereval = PerevalAdded.objects.get(pk=pk)
        except PerevalAdded.DoesNotExist:
            # ‚ùå –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
            return Response(
                {"state": 0, "message": "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"},
                status=status.HTTP_404_NOT_FOUND
            )

        # üÜî –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–∞–ª–∞
        status_id = pereval.status.id

        # ‚úÖ –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "New" (ID = 1), –º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ "Pending" (ID = 2)
        if status_id == 1:
            pereval.status_id = 2
            pereval.save()
            return Response(
                {"state": 1, "message": "–ü–µ—Ä–µ–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"},
                status=status.HTTP_200_OK
            )

        # ‚ö† –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ "Pending" (ID = 2)
        elif status_id == 2:
            return Response(
                {"state": 0, "message": "–ü–µ—Ä–µ–≤–∞–ª —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # ‚úÖ –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "Accepted" (ID = 3)
        elif status_id == 3:
            return Response(
                {"state": 0, "message": "–ü–µ—Ä–µ–≤–∞–ª —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # ‚ùå –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "Rejected" (ID = 4)
        elif status_id == 4:
            return Response(
                {"state": 0, "message": "–ü–µ—Ä–µ–≤–∞–ª –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # üîÑ –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        return Response(
            {"state": 0, "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞: {status_id}"},
            status=status.HTTP_400_BAD_REQUEST
        )


class ApiSettingsView(RetrieveUpdateAPIView):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ API (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)"""

    queryset = ApiSettings.objects.all()
    serializer_class = ApiSettingsSerializer  # –°–æ–∑–¥–∞–¥–∏–º —ç—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∏–∂–µ
    permission_classes = [IsAdminUser]  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É

    def get_object(self):
        """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ API"""
        obj, created = ApiSettings.objects.get_or_create(id=1)  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å
        return obj

    def perform_update(self, serializer):
        """–õ–æ–≥–∏—Ä—É–µ–º, –∫—Ç–æ –∏–∑–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        instance = serializer.save(updated_by=self.request.user)
        print(f"‚öôÔ∏è API Authentication –∏–∑–º–µ–Ω–µ–Ω–∞: {instance.require_authentication} (by {self.request.user})")


class ModeratorListView(ListCreateAPIView):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"""

    queryset = ModeratorGroup.objects.all()
    permission_classes = [IsSuperAdmin]  # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏

    def post(self, request, *args, **kwargs):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        user_id = request.data.get("user_id")
        try:
            user = User.objects.get(id=user_id)
            if hasattr(user, "moderator_group"):
                return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä"}, status=status.HTTP_400_BAD_REQUEST)
            ModeratorGroup.objects.create(user=user, added_by=request.user)
            return Response({"message": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω"}, status=status.HTTP_201_CREATED)
        except User.DoesNotExist:
            return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)


class ModeratorDeleteView(DestroyAPIView):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""

    queryset = ModeratorGroup.objects.all()
    permission_classes = [IsSuperAdmin]  # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤

    def delete(self, request, *args, **kwargs):
        """–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        mod_id = kwargs.get("pk")
        try:
            moderator = ModeratorGroup.objects.get(id=mod_id)
            moderator.delete()
            return Response({"message": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω"}, status=status.HTTP_200_OK)
        except ModeratorGroup.DoesNotExist:
            return Response({"error": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)


class UserDetailView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""

    @swagger_auto_schema(
        operation_description="üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email",
        responses={200: PerevalUserCheckSerializer, 404: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    )
    def get(self, request, email):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ email"""
        user = PerevalUser.objects.filter(email=email).first()
        if not user:
            return Response({"status": 404, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)

        serializer = PerevalUserCheckSerializer(user)
        return Response(serializer.data, status=status.HTTP_200_OK)


class RequestUserUpdateView(APIView):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email)"""

    def post(self, request, email):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email"""
        user = PerevalUser.objects.filter(email=email).first()
        if not user:
            return Response({"status": 404, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)

        send_confirmation_email(user)
        return Response({"status": 200, "message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email"}, status=status.HTTP_200_OK)


class ConfirmUserUpdateView(APIView):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞"""

    def patch(self, request, email):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–Ω—ã–π"""

        # üîπ –®–ê–ì 1: –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        user = PerevalUser.objects.filter(email=email).first()
        if not user:
            return Response(
                {"status": 404, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"},
                status=status.HTTP_404_NOT_FOUND
            )

        # üîπ –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        code = request.data.get("code")
        if not code:
            return Response(
                {"status": 400, "message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # üîπ –®–ê–ì 3: –ò—â–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ
        token = EmailConfirmationToken.objects.filter(user=user, code=code).first()
        if not token:
            return Response(
                {"status": 400, "message": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # üîπ –®–ê–ì 4: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        serializer = PerevalUserUpdateSerializer(user, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()

            # ‚úÖ –®–ê–ì 5: –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            token.delete()

            return Response(
                {"status": 200, "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"},
                status=status.HTTP_200_OK
            )

        # üîπ –®–ê–ì 6: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏
        return Response(
            {"status": 400, "message": serializer.errors},
            status=status.HTTP_400_BAD_REQUEST
        )


class UserSubmitsView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""

    def get(self, request, email):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ email.
        –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–∞–ª–æ–≤ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        user = PerevalUser.objects.filter(email=email).first()
        if not user:
            return Response({"status": 404, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)

        submits = PerevalAdded.objects.filter(user=user)
        if not submits.exists():
            return Response({"status": 200, "message": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤"}, status=status.HTTP_200_OK)

        serializer = PerevalAddedSerializer(submits, many=True)
        return Response({"status": 200, "data": serializer.data}, status=status.HTTP_200_OK)

# –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–µ–∑–æ–Ω–æ–≤
class SeasonListView(generics.ListAPIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤"""
    queryset = Season.objects.all()  # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Season
    serializer_class = SeasonSerializer  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä SeasonSerializer

# –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
class DifficultyLevelListView(generics.ListAPIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    queryset = DifficultyLevel.objects.all()  # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã DifficultyLevel
    serializer_class = DifficultyLevelSerializer  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä DifficultyLevelSerializer


class UpdateImageView(APIView):
    """üìå API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä–µ–≤–∞–ª–æ–≤"""
    parser_classes = (MultiPartParser, FormParser)

    @swagger_auto_schema(
        operation_description="üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–∞–ª–∞",
        manual_parameters=[
            openapi.Parameter(
                'image_id',
                openapi.IN_PATH,
                description="üìå ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                type=openapi.TYPE_INTEGER,
                required=True
            ),
            openapi.Parameter(
                'image',
                openapi.IN_FORM,
                description="üìå –ù–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                type=openapi.TYPE_FILE,
                required=False
            ),
            openapi.Parameter(
                'title',
                openapi.IN_FORM,
                description="üìå –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                type=openapi.TYPE_STRING,
                required=False
            ),
            openapi.Parameter(
                'file_name',
                openapi.IN_FORM,
                description="üìå –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω image)",
                type=openapi.TYPE_STRING,
                required=False
            )
        ],
        responses={
            200: openapi.Response("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"),
            400: openapi.Response("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å"),
            404: openapi.Response("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"),
            500: openapi.Response("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        }
    )
    def patch(self, request, image_id):
        """üìå –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ë–î –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        logger.info(f"[UpdateImageView][patch] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ID: {image_id}")
        logger.info(f"[UpdateImageView][patch] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {request.data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            image_record = PerevalImages.objects.get(id=image_id)
            logger.info(f"[UpdateImageView][patch] –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID: {image_id}")
        except PerevalImages.DoesNotExist:
            logger.error(f"[UpdateImageView][patch] –û—à–∏–±–∫–∞: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID {image_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return Response(
                {"status": 404, "message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"},
                status=status.HTTP_404_NOT_FOUND
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞
        pereval = image_record.pereval
        try:
            PerevalAdded.objects.get(id=pereval.id)
            logger.info(f"[UpdateImageView][patch] –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–∞–ª ID: {pereval.id}")
        except PerevalAdded.DoesNotExist:
            logger.error(f"[UpdateImageView][patch] –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–≤–∞–ª ID {pereval.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return Response(
                {"status": 404, "message": "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"},
                status=status.HTTP_404_NOT_FOUND
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        existing_images_count = PerevalImages.objects.filter(pereval=pereval).count()
        if existing_images_count > 3:
            logger.error(f"[UpdateImageView][patch] –û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–∞–ª–∞ ID {pereval.id}")
            return Response(
                {"status": 400, "message": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–≤–∞–ª"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        new_image = request.FILES.get('image')
        new_title = request.data.get('title')
        new_file_name = request.data.get('file_name')

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª, —Ç—Ä–µ–±—É–µ—Ç—Å—è file_name
        if new_image and not new_file_name:
            logger.error("[UpdateImageView][patch] –û—à–∏–±–∫–∞: –ü–æ–ª–µ file_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return Response(
                {"status": 400, "message": "–ü–æ–ª–µ file_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        try:
            if new_title:
                image_record.title = new_title
                logger.info(f"[UpdateImageView][patch] –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_title}")

            if new_image and new_file_name:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                old_file_path = os.path.join(settings.MEDIA_ROOT, image_record.data)
                if default_storage.exists(old_file_path):
                    default_storage.delete(old_file_path)
                    logger.info(f"[UpdateImageView][patch] –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_file_path}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                relative_path = os.path.join("pereval_images", new_file_name)
                full_path = os.path.join(settings.MEDIA_ROOT, relative_path)
                try:
                    default_storage.save(relative_path, ContentFile(new_image.read()))
                    logger.info(f"[UpdateImageView][patch] –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {relative_path}")
                    image_record.data = relative_path
                except Exception as e:
                    logger.error(f"[UpdateImageView][patch] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
                    return Response(
                        {"status": 500, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"},
                        status=status.HTTP_500_INTERNAL_SERVER_ERROR
                    )

            image_record.save()
            logger.info(f"[UpdateImageView][patch] –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î —Å ID: {image_id}")

        except Exception as e:
            logger.error(f"[UpdateImageView][patch] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
            return Response(
                {"status": 500, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

        return Response(
            {
                "status": 200,
                "message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                "image_id": image_record.id,
                "data": image_record.data,
                "title": image_record.title
            },
            status=status.HTTP_200_OK
        )