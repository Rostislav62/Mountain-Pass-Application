#  /Mountain Pass Application/main/serializers.py


import logging
from rest_framework import serializers
from main.models import PerevalAdded, Coords, User, PerevalImages, PerevalDifficulty, Season, DifficultyLevel, \
    ApiSettings, PerevalUser, PerevalStatus
from django.contrib.auth.models import User
# from .serializers import PerevalUserSerializer, CoordsSerializer, SeasonSerializer, DifficultyLevelSerializer, \
#     PerevalDifficultySerializer, PerevalImagesSerializer

logger = logging.getLogger(__name__)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏





class CoordsSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–≤–∞–ª–∞"""

    latitude = serializers.DecimalField(
        max_digits=9, decimal_places=6, coerce_to_string=False
    )
    longitude = serializers.DecimalField(
        max_digits=9, decimal_places=6, coerce_to_string=False
    )
    height = serializers.IntegerField()


    def validate_latitude(self, value):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∏—Ä–æ—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        if not (-90 <= value <= 90):
            raise serializers.ValidationError("–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç -90 –¥–æ 90.")
        return value

    def validate_longitude(self, value):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–ª–≥–æ—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        if not (-180 <= value <= 180):
            raise serializers.ValidationError("–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç -180 –¥–æ 180.")
        return value

    def validate_height(self, value):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã—Å–æ—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        if not (-500 <= value <= 9000):
            raise serializers.ValidationError("–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç -500 –¥–æ 9000 –º–µ—Ç—Ä–æ–≤.")
        return value

    class Meta:
        model = Coords
        fields = '__all__'

    def update(self, instance, validated_data):
        """–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return super().update(instance, validated_data)


class PerevalImagesSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä–µ–≤–∞–ª–∞"""

    class Meta:
        model = PerevalImages
        fields = ['id', 'data', 'title']

class PerevalUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = PerevalUser
        fields = ['id', 'family_name', 'first_name', 'father_name', 'phone', 'email']

        
class DifficultyLevelSerializer(serializers.ModelSerializer):
    class Meta:
        model = DifficultyLevel
        fields = ['code', 'description', 'characteristics', 'requirements']


class SeasonSerializer(serializers.ModelSerializer):
    class Meta:
        model = Season
        fields = ['code', 'name']


class PerevalDifficultySerializer(serializers.ModelSerializer):
    season = serializers.PrimaryKeyRelatedField(queryset=Season.objects.all())
    difficulty = serializers.PrimaryKeyRelatedField(queryset=DifficultyLevel.objects.all())

    class Meta:
        model = PerevalDifficulty
        fields = ['season', 'difficulty']


class SubmitDataSerializer(serializers.ModelSerializer):
    """üìå –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏ PerevalAdded"""

    user = PerevalUserSerializer()  # üîπ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    coord = CoordsSerializer()  # üîπ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    status = serializers.PrimaryKeyRelatedField(queryset=PerevalStatus.objects.all())  # üîπ –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞
    difficulties = PerevalDifficultySerializer(many=True)  # üîπ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
    images = PerevalImagesSerializer(many=True, required=True)  # üîπ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    class Meta:
        model = PerevalAdded
        fields = [
            'id',
            'beautyTitle',
            'title',
            'other_titles',
            'connect',
            'add_time',
            'user',
            'coord',
            'status',
            'difficulties',
            'images',
            'route_description'
        ]

    def to_representation(self, instance):
        """üìå –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ JSON –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        logger.info("[SubmitDataSerializer][to_representation] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ JSON")
        representation = super().to_representation(instance)
        # üîπ –ó–∞–º–µ–Ω—è–µ–º difficulties –Ω–∞ –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è GET
        difficulties = instance.difficulties.all()
        representation['difficulties'] = [
            {
                'season': SeasonSerializer(diff.season).data,
                'difficulty': DifficultyLevelSerializer(diff.difficulty).data
            }
            for diff in difficulties
        ]
        logger.info("[SubmitDataSerializer][to_representation] –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
        return representation

    def to_internal_value(self, data):
        """üìå –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        logger.info("[SubmitDataSerializer][to_internal_value] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        ret = super().to_internal_value(data)
        if 'difficulties' in data:
            difficulties = data['difficulties']
            ret['difficulties'] = [
                {'season': diff['season'], 'difficulty': diff['difficulty']}
                for diff in difficulties
            ]
        logger.info("[SubmitDataSerializer][to_internal_value] –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
        return ret

    def validate(self, data):
        """üìå –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("[SubmitDataSerializer][validate] –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        return data

    def update(self, instance, validated_data):
        """üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –∑–∞–ø–∏—Å–µ–π"""
        logger.info("[SubmitDataSerializer][update] –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–∞–ª–∞")

        user_data = validated_data.pop("user", None)
        coord_data = validated_data.pop("coord", None)
        difficulties_data = validated_data.pop('difficulties', None)
        images_data = validated_data.pop('images', None)

        # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_data:
            logger.info("[SubmitDataSerializer][update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            for attr, value in user_data.items():
                setattr(instance.user, attr, value)
            instance.user.save()

        # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if coord_data:
            logger.info("[SubmitDataSerializer][update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            for attr, value in coord_data.items():
                setattr(instance.coord, attr, value)
            instance.coord.save()

        # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for attr, value in validated_data.items():
            logger.info(f"[SubmitDataSerializer][update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è {attr}: {value}")
            setattr(instance, attr, value)
        instance.save()

        # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
        if difficulties_data is not None:
            logger.info("[SubmitDataSerializer][update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π")
            instance.difficulties.all().delete()
            new_difficulties = []
            for diff in difficulties_data:
                season_id = diff.get('season')
                difficulty_id = diff.get('difficulty')
                try:
                    season = Season.objects.get(id=season_id)
                    difficulty = DifficultyLevel.objects.get(id=difficulty_id)
                    new_difficulties.append(
                        PerevalDifficulty(pereval=instance, season=season, difficulty=difficulty)
                    )
                except (Season.DoesNotExist, DifficultyLevel.DoesNotExist):
                    logger.error(
                        f"[SubmitDataSerializer][update] –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ {season_id} –∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {difficulty_id}")
                    raise serializers.ValidationError(f"Invalid season ID {season_id} or difficulty ID {difficulty_id}")
            PerevalDifficulty.objects.bulk_create(new_difficulties)
            logger.info("[SubmitDataSerializer][update] –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if images_data is not None:
            logger.info("[SubmitDataSerializer][update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            existing_images = {img.id: img for img in instance.images.all()}
            for img_data in images_data:
                img_id = img_data.get("id")
                delete_flag = img_data.get("delete", False)

                if delete_flag and img_id in existing_images:
                    # üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ —Ñ–∞–π–ª–∞
                    img = existing_images[img_id]
                    file_path = os.path.join(settings.MEDIA_ROOT, img.data)
                    if os.path.exists(file_path):
                        os.remove(file_path)
                        logger.info(f"[SubmitDataSerializer][update] –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {img.data}")
                    img.delete()
                    logger.info(f"[SubmitDataSerializer][update] –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ID: {img_id}")
                elif img_id and img_id in existing_images:
                    # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                    img = existing_images[img_id]
                    old_data = img.data
                    img.data = img_data.get("data", img.data)
                    img.title = img_data.get("title", img.title)
                    img.save()
                    logger.info(f"[SubmitDataSerializer][update] –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ID: {img_id}")
                    # üîπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    if old_data != img.data:
                        old_file_path = os.path.join(settings.MEDIA_ROOT, old_data)
                        if os.path.exists(old_file_path):
                            os.remove(old_file_path)
                            logger.info(f"[SubmitDataSerializer][update] –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_data}")
                else:
                    # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                    PerevalImages.objects.create(pereval=instance, **img_data)
                    logger.info("[SubmitDataSerializer][update] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        logger.info("[SubmitDataSerializer][update] –ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
        return instance


class ApiSettingsSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API"""

    class Meta:
        model = ApiSettings
        fields = ['require_authentication', 'updated_at', 'updated_by']
        read_only_fields = ['updated_at', 'updated_by']  # –≠—Ç–∏ –ø–æ–ª—è –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –≤—Ä—É—á–Ω—É—é


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
class PerevalUserCheckSerializer(serializers.ModelSerializer):
    class Meta:
        model = PerevalUser
        fields = ['id', 'family_name', 'first_name', 'father_name', 'phone', 'email']


class PerevalUserUpdateSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ email)"""

    class Meta:
        model = PerevalUser
        fields = ['family_name', 'first_name', 'father_name', 'phone']
        extra_kwargs = {
            'phone': {'required': False},
            'family_name': {'required': False},
            'first_name': {'required': False},
            'father_name': {'required': False},
        }


class UserConfirmUpdateSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞"""

    code = serializers.CharField(write_only=True, required=True)  # –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏)

    class Meta:
        model = PerevalUser
        fields = ['family_name', 'first_name', 'father_name', 'phone', 'email', 'code']  # –í—Å–µ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–æ–ª—è + –∫–æ–¥

    def validate(self, data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º"""
        user = self.instance  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        input_code = data.pop("code", None)

        if not input_code:
            raise serializers.ValidationError({"code": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."})

        if user.confirmation_code != input_code:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
            raise serializers.ValidationError({"code": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."})

        return data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ


class PerevalAddedSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏ PerevalAdded"""

    class Meta:
        model = PerevalAdded
        fields = '__all__'  # –ò–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è